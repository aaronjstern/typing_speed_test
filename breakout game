from turtle import Screen, Turtle
from itertools import cycle


class ScoreBoard(Turtle):

    def __init__(self, points):
        super().__init__()
        self.penup()
        self.goto(-600, 300)
        self.color("white")
        self.hideturtle()
        self.write(f"Points: {points}", font=("Courier", 20, "normal"))

    def update_scoreboard(self, points):
        self.clear()
        self.write(f"Points: {points}", font=("Courier", 20, "normal"))


class EndMessage(Turtle):

    def __init__(self):
        super().__init__()
        self.penup()
        self.goto(0, 300)
        self.color("white")
        self.hideturtle()

    def lose_message(self):
        self.write(f"Out of lives", font=("Courier", 40, "normal"), align="center")

    def win_message(self):
        self.write(f"You win!", font=("Courier", 40, "normal"), align="center")


class LivesTracker(Turtle):

    def __init__(self, lives):
        super().__init__()
        self.penup()
        self.goto(400,300)
        self.color("white")
        self.hideturtle()
        self.write(f"Lives remaining: {lives}", font=("Courier", 20, "normal"))

    def update_lives(self, lives):
        self.clear()
        self.write(f"Lives remaining: {lives}", font=("Courier", 20, "normal"))


class Brick(Turtle):

    def __init__(self, position, color):
        super().__init__()
        self.position()
        self.shape("square")
        self.penup()
        self.shapesize(stretch_wid=2, stretch_len=5)
        self.goto(position)
        self.color(color)


class Ball(Turtle):

    def __init__(self):
        super().__init__()
        self.penup()
        self.color("white")
        self.shape("circle")
        self.penup()
        self.x_move = 3
        self.y_move = 3
        self.move_speed = 0.1

    def move(self):
        new_x = self.xcor() + self.x_move
        new_y = self.ycor() + self.y_move
        self.goto(new_x, new_y)

    def bounce_y(self):
        self.y_move *= -1

    def bounce_x(self):
        self.x_move *= -1
        # self.move_speed *= 0.9

    def reset_position(self):
        self.goto(0, 0)
        self.move_speed = 0.1
        self.bounce_x()


class Paddle(Turtle):

    def __init__(self, position):
        Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup()
        self.shapesize(stretch_wid=1, stretch_len=10)
        self.goto(position)

    def move_right(self):
        new_x = self.xcor() + 40
        self.goto((new_x, self.ycor()))

    def move_left(self):
        new_x = self.xcor() - 40
        self.goto((new_x, self.ycor()))
>>>>>>> d519303 (breakout game initial)


screen = Screen()
screen.bgcolor("black")
screen.setup(width=1300, height=800)
screen.title("Breakout")
screen.tracer(0)


paddle = Paddle((0, -300))

screen.listen()
screen.onkey(paddle.move_left, "Left")
screen.onkey(paddle.move_right, "Right")

ball = Ball()

x_vals = [i for i in range(-600, 620, 110)]
y_vals = [i for i in range(0, 300, 60)]

positions = []

colors = ["red", "orange", "yellow", "green", "blue", "purple"]

for yval in y_vals:
    for xval in x_vals:
        positions.append((xval, yval))

positions_colors = list(zip(positions, cycle(colors)))

print(positions_colors)

bricks = []
for position_color in positions_colors:
    brick = Brick(position=position_color[0], color=position_color[1])
    bricks.append(brick)

lives = 5

livesTracker = LivesTracker(lives)

points = 0

scoreboard = ScoreBoard(points)

game_is_on = True
while lives > 0:
    screen.update()
    ball.move()

    if ball.ycor() < -380:
        lives -= 1
        livesTracker.update_lives(lives)
        ball.reset_position()

    if ball.ycor() > 380:
        ball.bounce_y()

    if ball.xcor() > 630 or ball.xcor() < -630:
        ball.bounce_x()

    if paddle.distance(ball) < 100 and ball.ycor() <= - 280:
        ball.bounce_y()

    for brick in bricks:
        if brick.distance(ball) < 65:
            bricks.remove(brick)
            ball.bounce_x()
            brick.reset()
            ball.bounce_y()
            points += 1
            scoreboard.update_scoreboard(points)

    if len(bricks) == 0:
        break

end_message = EndMessage()

if lives == 0:
    end_message.lose_message()
else:
    end_message.win_message()

screen.exitonclick()
